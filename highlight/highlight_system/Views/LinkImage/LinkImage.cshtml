
@{
    ViewBag.Title = "AVI 圖片連結";

    var grid_size = 20;
    var Panel_X_Num = ViewBag.Panel_X_Num;
    var Panel_Y_Num = ViewBag.Panel_Y_Num;
    var Strip_X_Num = ViewBag.Strip_X_Num;
    var Strip_Y_Num = ViewBag.Strip_Y_Num;
    var defect_json_str = ViewBag.defect_json_str;
    //var defect_array = JSON.parse(defect_json_str);
}

@Styles.Render("~/css/portfolio.css")

<!-- Page Heading -->
<h1 class="h3 mb-2 text-gray-800">@ViewBag.Title</h1>
<p class="mb-4">
    1. 輸入[批號]、[版號]、[缺點名稱]顯示方格圖<br>
    2. 點選方格圖中Fail的位置顯示實際照片<br>
    @*<a target="_blank" href="https://datatables.net">official DataTables documentation</a>.*@
</p>


<div class="card shadow mb-4 p-3">
    <!-- Topbar Search -->
    <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search" method="post">
        <div class="row">

            <div class="col-auto input-group  mb-1">
                <label class="">批號</label>
                <input id="lot_input" name="lot_input" type="text" class="form-control bg-light border-1 small input-group-append ml-1" placeholder="" value="@ViewBag.Lot">
            </div>

            <!-- 選擇板號 -->
            <div class="col-auto input-group mb-1">
                <div class="dropdown input-group-prepend">
                    <label class="">板號</label>

                    <select name="panel_num_Select" class="form-control rounded-0 ml-1" style="overflow-x: auto;" id="panel_num_Select">
                        @for (int i = 1; i <= ViewBag.MaxTotalPanel; i++)
                        {
                            if (ViewBag.SelectedPanel == i)
                            {
                                <option selected>@i</option>
                            }
                            else
                            {
                                <option>@i</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <!-- 選擇Defect code -->
            <div class="col-auto input-group  mb-1">
                @*<a href="#" class="list-group-item list-group-item-action disabled text-white bg-info rounded-top">Defect Code</a>*@
                <div class=" input-group-prepend">
                    <label class="">缺點名稱</label>
                    <select name="defect_code" class="form-control rounded-0 ml-1" style="overflow-x: auto;" id="defect_code_Select">
                        @foreach (String code in ViewBag.defectCodeList)
                        {
                            if (ViewBag.SelectedDefect == code)
                            {
                                <option selected>@code</option>
                            }
                            else
                            {
                                <option>@code</option>
                            }
                        }
                    </select>

                </div>
            </div>

            <div class="col-auto input-group  mb-1">
                <button class="btn btn-secondary" onclick="click_search();" type="submit">
                    <i class="fas fa-search fa-sm"></i>
                    <span class="text">查詢</span>
                </button>
            </div>

            <!-- 網頁提示訊息 -->
            @if (!string.IsNullOrEmpty(ViewBag.ErrMsg))
            {
                <div class="col-auto mt-1">
                    <label class="text-danger" id="ErrMsg_label">@ViewBag.ErrMsg</label>
                </div>
            }

        </div>


    </form>

</div>

@if (Panel_X_Num != null)
{

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <div class="row align-items-center">

                <div class="col-auto mr-auto">
                    <h5 class="m-0 font-weight-bold text-primary">@ViewBag.Lot _ @ViewBag.SelectedPanel _ @ViewBag.SelectedDefect</h5>
                </div>

                <div class="col-auto">
                    <button id="btn_select_all" class="btn btn-outline-info " value="btn_select_all" name="btn_select_all" onclick="selectAll()">
                        <span class="text">全選</span>
                    </button>
                </div>

                <div class="col">
                    <button id="btn_clear" class="btn btn-outline-info " value="btn_clear" name="btn_clear" onclick="clearAll()">
                        <span class="text">清除</span>
                    </button>
                </div>

                <div class="col-auto">
                    <button id="btn_view_pic" class="btn btn-info " type="button" onclick="click_view_pic()">
                        @*<i class="fas fa-download fa-sm"></i>*@
                        <span class="text">查看實照</span>
                    </button>
                </div>

            </div>
        </div>
        <div class="card-body">
            @*<div class="row justify-content-center"><p class="h3 text-danger">批號:@ViewBag.Lot  板號:@ViewBag.SelectedPanel  缺點名稱:@ViewBag.SelectedDefect</p></div>*@
            <div class="row  justify-content-center"><p class="h3 text-danger">已選取座標: <label id="label_select_coor"></label></p></div>
            <div class="container overflow-auto d-flex justify-content-center position-relative">
                <canvas id='canvas' class="" style="z-index: 0;" ></canvas>
                <canvas id="c2" class="position-absolute" style="z-index: 1;"></canvas>
            </div>
        </div>
    </div>
    <p id='showCoords'></p>
}

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#showImageModal" hidden>
    Launch demo modal
</button>

<!-- Modal -->
<div class="portfolio-modal modal fade" id="showImageModal" tabindex="-1" role="dialog" aria-labelledby="showImageModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <img class="img-fluid  d-block mx-auto" src="../../img/lab_mo01.png" alt="..." />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">

    setTimeout(setErrMsgDisplay, 3000);

    function setErrMsgDisplay() {
        console.log("setErrMsgDisplay~");
        $('#ErrMsg_label').css("display", "none");
    }

    function click_search() {
        //畫面執行中circle
        $('.spinner').css('display', 'block');
    }

    function click_view_pic() {
        //console.log(defect_array);
        console.log(selected_defect_array_transfer_index);

        const myJSON = JSON.stringify(defect_array);
        console.log("myJSON: " + myJSON);

        $("input[name='lot_input']").val($("#lot_input").val());
        $("input[name='panel_num_Select']").val($("#panel_num_Select").val());
        $("input[name='defect_code']").val($("#defect_code_Select").val());
        $("input[name='defect_array']").val(myJSON);
        $("input[name='selected_defect_array_transfer_index']").val(selected_defect_array_transfer_index);

        //表單提交
        $("form[name='viewPicForm']").submit();
    }


    var grid_size = 20;
    var Panel_No = 4;
    var Panel_X_Num = @Html.Raw(@Panel_X_Num);
    var Panel_Y_Num =@Html.Raw(@Panel_Y_Num);
    var Strip_X_Num = @Html.Raw(@Strip_X_Num);
    var Strip_Y_Num = @Html.Raw(@Strip_Y_Num);
    var defect_array = @Html.Raw(@defect_json_str);
    var defect_array_transfer = []; // 轉換座標後的 defect array
    var selected_defect_array_transfer = [];  // 已選取的 defect
    var selected_defect_array_transfer_index = []; // {0,0,0,1,0,0,1,0,......}  1表示已選取的index, 0表示沒有選取

    window.onload = draw();

    function getSquare(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: 1 + (evt.clientX - rect.left) - (evt.clientX - rect.left) % grid_size,
            y: 1 + (evt.clientY - rect.top) - (evt.clientY - rect.top) % grid_size
        };
    }

    function isFailBin(x, y) {
        var myJson = { X: (x - 1) / 20, Y: (y - 1) / 20 };

        const found = defect_array_transfer.some(function (item, index, array) {
            return item.X == myJson.X && item.Y == myJson.Y
        });

        return found;
    }

    function isFailBinSelected(context, x, y) {
        var myJson = { X: (x - 1) / grid_size, Y: (y - 1) / grid_size };
        // console.log("call isFailBinSelected: (x,y) = (" + myJson.X + "," + myJson.Y + ")");
        const found_selected = selected_defect_array_transfer.some(function (item, index, array) {
            return item.X == myJson.X && item.Y == myJson.Y
        });
        
        return found_selected;
    }

    function deleteItemSelectedArray(x, y) {
        var myJson = { X: (x - 1) / grid_size, Y: (y - 1) / grid_size };
        var id = defect_array_transfer.findIndex(function (item, index, arr) {
            return item.X == myJson.X && item.Y == myJson.Y
        });
        var selected_id = selected_defect_array_transfer.findIndex(function (item, index, arr) {
            return item.X == myJson.X && item.Y == myJson.Y
        });
        selected_defect_array_transfer.splice(selected_id, 1);
        selected_defect_array_transfer_index[id] = 0;
    }

    function pushItemSelectedArray(x, y) {
        var myJson = { X: (x - 1) / grid_size, Y: (y - 1) / grid_size };
        var id = defect_array_transfer.findIndex(function (item, index, arr) {
            return item.X == myJson.X && item.Y == myJson.Y
        });
        selected_defect_array_transfer.push(myJson);
        selected_defect_array_transfer_index[id] = 1;
    }

    function fillSquare(context, x, y) {
        context.fillStyle = `rgb(150,0,0)`;
        context.fillRect(x, y, grid_size - 1, grid_size - 1);
    }

    function fillNotSelectFailBinSquare(context, x, y) {
        context.fillStyle = "rgb(255, 100, 0)";
        context.fillRect(x, y, grid_size - 1, grid_size - 1);
    }

    function clearAll() {
        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');

        selected_defect_array_transfer = [];
        selected_defect_array_transfer_index = new Array(defect_array_transfer.length).fill(0);

        // 畫 fail bin 已選取紅格子
        for (let i = 0; i < defect_array.length; i++) {
            // red alert area
            // ctx.fillStyle = "rgb(255, 100, 0)";
            var x = defect_array[i].X;
            var y = defect_array[i].Y;

            y = Panel_Y_Num * Strip_Y_Num + 1 - y;

            x = (x % Strip_X_Num == 0) ? x + Math.floor(x / Strip_X_Num) - 1 : x + Math.floor(x / Strip_X_Num);
            y = (y % Strip_Y_Num == 0) ? y + Math.floor(y / Strip_Y_Num) - 1 : y + Math.floor(y / Strip_Y_Num);

            fillNotSelectFailBinSquare(ctx, x * grid_size, y * grid_size);
        }
    }

    function selectAll() {
        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');

        selected_defect_array_transfer = Array.from(defect_array_transfer);
        selected_defect_array_transfer_index = new Array(defect_array_transfer.length).fill(1);

        // 畫 fail bin 已選取紅格子
        for (let i = 0; i < defect_array.length; i++) {
            // red alert area
            // ctx.fillStyle = "rgb(150, 0, 0)";
            var x = defect_array[i].X;
            var y = defect_array[i].Y;

            y = Panel_Y_Num * Strip_Y_Num + 1 - y;

            x = (x % Strip_X_Num == 0) ? x + Math.floor(x / Strip_X_Num) - 1 : x + Math.floor(x / Strip_X_Num);
            y = (y % Strip_Y_Num == 0) ? y + Math.floor(y / Strip_Y_Num) - 1 : y + Math.floor(y / Strip_Y_Num);

            fillSquare(ctx, x * grid_size, y * grid_size);
        }

    }

    function draw() {

        var canvas = document.getElementById('canvas');
        var canvas2 = document.getElementById('c2');

        let vertical_line_num = Panel_X_Num;
        let horizontal_line_num = Panel_Y_Num + 1;

        var canvas_width = (Panel_X_Num * Strip_X_Num + vertical_line_num) * grid_size;
        var canvas_height = (Panel_Y_Num * Strip_Y_Num + horizontal_line_num) * grid_size;


        // 設定長寬
        canvas.setAttribute("height", canvas_height);
        canvas.setAttribute("width", canvas_width);
        canvas2.setAttribute("height", canvas_height);
        canvas2.setAttribute("width", canvas_width);

        if (canvas.getContext) {
            var ctx = canvas.getContext('2d');
            var ctx2 = canvas2.getContext('2d');

            for (let i = 0; i < Panel_Y_Num * Strip_Y_Num + Panel_Y_Num; i++) {
                for (let j = 0; j < Panel_X_Num * Strip_X_Num + Panel_X_Num; j++) {
                    ctx.fillStyle = `rgb(0, 255, 0)`;
                    ctx.fillRect(j * (grid_size + 5), i * (grid_size + 5), (grid_size + 5), (grid_size + 5));
                }
            }


            // 畫 fail bin 格子
            for (let i = 0; i < defect_array.length; i++) {
                // red alert area
                //ctx.fillStyle = "rgb(255, 100, 0)";
                var x = defect_array[i].X;
                var y = defect_array[i].Y;
                //console.log("befor (x,y) = (" + x + "," + y + ")");

                y = Panel_Y_Num * Strip_Y_Num + 1 - y;

                x = (x % Strip_X_Num == 0) ? x + Math.floor(x / Strip_X_Num) - 1 : x + Math.floor(x / Strip_X_Num);
                y = (y % Strip_Y_Num == 0) ? y + Math.floor(y / Strip_Y_Num) - 1 : y + Math.floor(y / Strip_Y_Num);
                defect_array_transfer.push({ X: x, Y: y });
                selected_defect_array_transfer_index.push(0);

                fillNotSelectFailBinSquare(ctx, x * grid_size, y * grid_size);
            }

            ctx.lineWidth = 1;
            // 垂直格線
            for (var x = grid_size; x < canvas_width; x += grid_size) {
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas_height);
            }
            // 水平格線
            for (var y = grid_size; y < canvas_height; y += grid_size) {
                ctx.moveTo(0, y);
                ctx.lineTo(canvas_width, y);
            }

            ctx.strokeStyle = 'block';
            ctx.stroke();

            // 畫垂直粗線
            for (var i = 0; i < vertical_line_num; i++) {

                ctx.fillStyle = "rgb(50, 120, 0)";

                ctx.fillRect(grid_size * (Strip_X_Num * i + i), 0, grid_size, canvas_height);
            }

            // 畫水平粗線
            for (var i = 0; i < horizontal_line_num; i++) {

                ctx.fillStyle = "rgb(50, 120, 0)";

                ctx.fillRect(0, grid_size * (Strip_Y_Num * i + i), canvas_width, grid_size);
            }

            // 畫垂直座標文字
            for (var i = 0; i < vertical_line_num; i++) {
                ctx.fillStyle = "rgb(0, 255, 0)";
                ctx.textAlign = "center";
                let text_x = grid_size * ((Strip_X_Num + 1) * i);
                for (var j = 0; j < Panel_Y_Num * Strip_Y_Num + horizontal_line_num; j++) {
                    if (j % (Strip_Y_Num + 1) == 0) continue;
                    ctx.fillText(Strip_Y_Num + 1 - j % (Strip_Y_Num + 1), text_x + grid_size / 2, grid_size * j + grid_size / 2);
                }
            }

            // 畫水平座標文字
            for (var i = 1; i < horizontal_line_num; i++) {
                ctx.fillStyle = "rgb(0, 255, 0)";
                ctx.textAlign = "center";
                let text_y = grid_size * ((Strip_Y_Num + 1) * i);
                for (var j = 0; j < Panel_X_Num * Strip_X_Num + vertical_line_num; j++) {
                    if (j % (Strip_X_Num + 1) == 0) continue;
                    ctx.fillText(j % (Strip_X_Num + 1), grid_size * j + grid_size / 2, text_y + grid_size / 2);
                }
            }

            var isDrag = false;
            var previousPos = (-1, -1);

            //canvas.addEventListener('mousedown', function (evt) {
            //    var mousePos = getSquare(canvas, evt);
            //    previousCoor.x = mousePos.x;
            //    previousCoor.y = mousePos.y;

            //    isDrag = true;
            //    // var is_FailBin = isFailBin(mousePos.x, mousePos.y)
            //    // if (is_FailBin) {
            //    //   var is_FailBinSelected = isFailBinSelected(ctx, mousePos.x, mousePos.y)
            //    //   if (is_FailBinSelected) {
            //    //     fillNotSelectFailBinSquare(ctx, mousePos.x, mousePos.y);
            //    //   } else {
            //    //     fillSquare(ctx, mousePos.x, mousePos.y);
            //    //   }
            //    // }
            //    previousPos = mousePos;

            //}, false);
            

            //canvas.addEventListener('mouseup', function (evt) {
            //    if (isDrag) {
            //        var mousePos = getSquare(canvas, evt);
            //        // console.log("mouseup:" + mousePos.x + "," + mousePos.y);
            //        //console.log("mouseup:" + (mousePos.y - previousCoor.y) / grid_size + "," + (mousePos.x - previousCoor.x) / grid_size);
            //        // drawRect(ctx, xx, yy, mousePos.x, mousePos.y);
            //        for (i = 0; i <= (mousePos.y - previousCoor.y) / grid_size; i++) {
            //            for (j = 0; j <= (mousePos.x - previousCoor.x) / grid_size; j++) {
            //                var is_FailBinSelected = isFailBin(mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
            //                if (is_FailBinSelected) {
            //                    var is_FailBinSelected = isFailBinSelected(ctx, mousePos.x - (j * grid_size), mousePos.y - (i * grid_size))
            //                    if (is_FailBinSelected) {
            //                        fillNotSelectFailBinSquare(ctx, mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
            //                    } else {
            //                        fillSquare(ctx, mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
            //                    }
            //                    // fillSquare(ctx, mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
            //                }
            //            }
            //        }
            //        isDrag = false;
            //        //console.log("selected_defect_array_transfer:");
            //        //console.log(selected_defect_array_transfer);
            //        //console.log("selected_defect_array_transfer_index:");
            //        //console.log(selected_defect_array_transfer_index);
            //        //var selected_defect_array = [];
            //        var show_str = "";
            //        for (var idx = 0; idx < selected_defect_array_transfer_index.length; idx++) {
            //            if (selected_defect_array_transfer_index[idx] == 1) {
            //                //selected_defect_array.push(defect_array[idx]);
            //                show_str += "(" + defect_array[idx].X + ","+ defect_array[idx].Y + "), ";
            //            }
            //        }
            //        //console.log("selected_defect_array:");
            //        //console.log(selected_defect_array);
            //        document.getElementById("label_select_coor").innerHTML = show_str;

            //        //$('#showImageModal').modal('toggle');
            //    }

            //}, false);

            //ctx2.setLineDash([5, 5]);
            var origin = null;

            c2.onmousedown = e => {
                origin = { x: e.offsetX, y: e.offsetY };
                var mousePos = getSquare(canvas2, e);

                isDrag = true;
                previousPos = mousePos;
            };

            window.onmouseup = e => {
                ctx2.clearRect(0, 0, c2.width, c2.height);
                origin = null;
                if (isDrag) {
                    var mousePos = getSquare(canvas2, e);

                    if (mousePos.x - previousPos.x < 0) {
                        var tempPos_x = mousePos.x;
                        mousePos.x = previousPos.x;
                        previousPos.x = tempPos_x;
                    }
                    if (mousePos.y - previousPos.y < 0) {
                        var tempPos_y = mousePos.y;
                        mousePos.y = previousPos.y;
                        previousPos.y = tempPos_y;
                    }

                    // console.log("mouseup-mousePos:" + mousePos.x + "," + mousePos.y);
                    // console.log("mouseup-previousPos:" + previousPos.x + "," + previousPos.y);
                    // console.log("mouseup-offset:" + (mousePos.y - previousPos.y) / grid_size + "," + (mousePos.x - previousPos.x) / grid_size);

                    for (i = 0; i <= (mousePos.y - previousPos.y) / grid_size; i++) {
                        for (j = 0; j <= (mousePos.x - previousPos.x) / grid_size; j++) {
                            var is_FailBinSelected = isFailBin(mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
                            if (is_FailBinSelected) {
                                var is_FailBinSelected = isFailBinSelected(ctx, mousePos.x - (j * grid_size), mousePos.y - (i * grid_size))
                                if (is_FailBinSelected) {
                                    // 只有單點的時候可以取消選取
                                    if ((mousePos.y - previousPos.y) / grid_size == 0 && (mousePos.x - previousPos.x) / grid_size == 0) {
                                        fillNotSelectFailBinSquare(ctx, mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
                                        deleteItemSelectedArray(mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
                                    }
                                } else {
                                    fillSquare(ctx, mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
                                    pushItemSelectedArray(mousePos.x - (j * grid_size), mousePos.y - (i * grid_size));
                                }
                            }
                        }
                    }

                    var show_str = "";
                    for (var idx = 0; idx < selected_defect_array_transfer_index.length; idx++) {
                        if (selected_defect_array_transfer_index[idx] == 1) {
                            //selected_defect_array.push(defect_array[idx]);
                            show_str += "(" + defect_array[idx].X + ","+ defect_array[idx].Y + "), ";
                        }
                    }


                    isDrag = false;
                    //console.log("selected_defect_array_transfer:");
                    //console.log(selected_defect_array_transfer);
                    //console.log("selected_defect_array_transfer_index:");
                    //console.log(selected_defect_array_transfer_index);
                    document.getElementById("label_select_coor").innerHTML = show_str;
                    //$('#showImageModal').modal('toggle');
                }
            };

            c2.onmousemove = e => {
                if (!!origin) {
                    ctx2.strokeStyle = "#be4e19";
                    ctx2.lineWidth = 3;
                    ctx2.clearRect(0, 0, c2.width, c2.height);
                    ctx2.beginPath();
                    ctx2.rect(origin.x, origin.y, e.offsetX - origin.x, e.offsetY - origin.y);
                    ctx2.stroke();
                }
            };

        }
    }
    

</script>


@using (Html.BeginForm("View_Pic", "LinkImage", FormMethod.Post, new { name = "viewPicForm", target = "_blank" }))
{
    @Html.Hidden("lot_input")
    @Html.Hidden("panel_num_Select")
    @Html.Hidden("defect_code")
    @Html.Hidden("defect_array")
    @Html.Hidden("selected_defect_array_transfer_index")
}


